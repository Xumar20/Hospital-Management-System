

CREATE OR REPLACE PACKAGE HMS_UPDATE_Package AS 
  PROCEDURE UpdatePatient(
    p_PatientID  PatientDetails.PatientID%type,
    p_FirstName  PatientDetails.FirstName%type,
    p_LastName  PatientDetails.LastName%type,
    p_Gender  PatientDetails.Gender%type,
    p_DateOfBirth  PatientDetails.DateOfBirth%type,
    p_Phone  PatientDetails.Phone%type,
    p_Email  PatientDetails.Email%type,
    p_Address  PatientDetails.Address%type,
    p_InsuranceInfo  PatientDetails.InsuranceInfo%type,
    p_MedicalHistory  PatientDetails.MedicalHistory%type
  );
END HMS_UPDATE_Package;

CREATE OR REPLACE PACKAGE BODY HMS_UPDATE_Package AS
  PROCEDURE UpdatePatient(
    p_PatientID  PatientDetails.PatientID%type,
    p_FirstName  PatientDetails.FirstName%type,
    p_LastName  PatientDetails.LastName%type,
    p_Gender  PatientDetails.Gender%type,
    p_DateOfBirth  PatientDetails.DateOfBirth%type,
    p_Phone  PatientDetails.Phone%type,
    p_Email  PatientDetails.Email%type,
    p_Address  PatientDetails.Address%type,
    p_InsuranceInfo  PatientDetails.InsuranceInfo%type,
    p_MedicalHistory  PatientDetails.MedicalHistory%type
  ) IS
  BEGIN
    -- Attempt to update the patient information
    UPDATE PatientDetails
    SET FirstName = p_FirstName,
        LastName = p_LastName,
        Gender = p_Gender,
        DateOfBirth = p_DateOfBirth,
        Phone = p_Phone,
        Email = p_Email,
        Address = p_Address,
        InsuranceInfo = p_InsuranceInfo,
        MedicalHistory = p_MedicalHistory
    WHERE PatientID = p_PatientID;

    -- Check if any rows were affected by the UPDATE statement
    IF SQL%ROWCOUNT = 0 THEN
      -- Raise a custom exception if no rows were updated
      RAISE_APPLICATION_ERROR(-20001, 'No patient found with PatientID: ' || p_PatientID);
    ELSE
      -- Commit the transaction if rows were updated
      COMMIT;
    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Handle the specific exception when no data is found
      RAISE_APPLICATION_ERROR(-20002, 'No patient found with PatientID: ' || p_PatientID);

    WHEN DUP_VAL_ON_INDEX THEN
      -- Handle the case when a unique constraint violation occurs
      RAISE_APPLICATION_ERROR(-20003, 'Duplicate values found in the database.');

    WHEN OTHERS THEN
      -- Handle any other exceptions that might occur
      -- You can log the error or take other appropriate actions
      -- For example: 
      -- DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
      -- ROLLBACK; -- You might want to rollback the transaction
      RAISE; -- Re-raise the exception for debugging and error propagation
  END UpdatePatient;
END HMS_UPDATE_Package;




-- Package specification (Header)
CREATE OR REPLACE PACKAGE HMS_Update_Package AS
  PROCEDURE UpdateDoctor(
    p_DoctorID DoctorInformation.DoctorID%type,
    p_FirstName DoctorInformation.FirstName%type,
    p_LastName DoctorInformation.LastName%type,
    p_Specialization DoctorInformation.Specialization%type,
    p_ContactInfo DoctorInformation.ContactInfo%type
  );
END HMS_Update_Package;

-- Package body
CREATE OR REPLACE PACKAGE BODY HMS_Update_Package AS
  -- Procedure for updating data in the Doctor Information Table
  PROCEDURE UpdateDoctor(
    p_DoctorID DoctorInformation.DoctorID%type,
    p_FirstName DoctorInformation.FirstName%type,
    p_LastName DoctorInformation.LastName%type,
    p_Specialization DoctorInformation.Specialization%type,
    p_ContactInfo DoctorInformation.ContactInfo%type
  ) IS
  BEGIN
    -- Attempt to update the doctor information
    UPDATE DoctorInformation
    SET FirstName = p_FirstName,
        LastName = p_LastName,
        Specialization = p_Specialization,
        ContactInfo = p_ContactInfo
    WHERE DoctorID = p_DoctorID;

    -- Check if any rows were affected by the UPDATE statement
    IF SQL%ROWCOUNT = 0 THEN
      -- Raise a custom exception if no rows were updated
      RAISE_APPLICATION_ERROR(-20001, 'No doctor found with DoctorID: ' || p_DoctorID);
    ELSE
      -- Commit the transaction if rows were updated
      COMMIT;
    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Handle the specific exception when no data is found
      RAISE_APPLICATION_ERROR(-20002, 'No doctor found with DoctorID: ' || p_DoctorID);

    WHEN DUP_VAL_ON_INDEX THEN
      -- Handle the case when a unique constraint violation occurs
      RAISE_APPLICATION_ERROR(-20003, 'Duplicate values found in the database.');

    WHEN OTHERS THEN
      -- Handle any other exceptions that might occur
      -- You can log the error or take other appropriate actions
      -- For example: 
      -- DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
      -- ROLLBACK; -- You might want to rollback the transaction
      RAISE; -- Re-raise the exception for debugging and error propagation
  END UpdateDoctor;
END HMS_Update_Package;




-- Package specification (Header)
CREATE OR REPLACE PACKAGE HMS_Update_Package AS
  -- Procedure for updating data in the Appointment Table
  PROCEDURE UpdateAppointment(
    p_AppointmentID Appointment.AppointmentID%type,
    p_PatientID Appointment.PatientId%type,
    p_DoctorID Appointment.DoctorId%type,
    p_AppointmentDateTime Appointment.AppointmentDateTime%type,
    p_Purpose Appointment.purpose%type,
    p_Status Appointment.status%type
  );
END HMS_Update_Package;

-- Package body
CREATE OR REPLACE PACKAGE BODY HMS_Update_Package AS
  -- Procedure for updating data in the Appointment Table
  PROCEDURE UpdateAppointment(
    p_AppointmentID Appointment.AppointmentID%type,
    p_PatientID Appointment.PatientId%type,
    p_DoctorID Appointment.DoctorId%type,
    p_AppointmentDateTime Appointment.AppointmentDateTime%type,
    p_Purpose Appointment.purpose%type,
    p_Status Appointment.status%type
  ) IS
  BEGIN
    -- Attempt to update the appointment information
    UPDATE Appointment
    SET
      PatientID = p_PatientID,
      DoctorID = p_DoctorID,
      AppointmentDateTime = p_AppointmentDateTime,
      Purpose = p_Purpose,
      Status = p_Status
    WHERE AppointmentID = p_AppointmentID;

    -- Check if any rows were affected by the UPDATE statement
    IF SQL%ROWCOUNT = 0 THEN
      -- Raise a custom exception if no rows were updated
      RAISE_APPLICATION_ERROR(-20001, 'No appointment found with AppointmentID: ' || p_AppointmentID);
    ELSE
      -- Commit the transaction if rows were updated
      COMMIT;
    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Handle the specific exception when no data is found
      RAISE_APPLICATION_ERROR(-20002, 'No appointment found with AppointmentID: ' || p_AppointmentID);

    WHEN DUP_VAL_ON_INDEX THEN
      -- Handle the case when a unique constraint violation occurs
      RAISE_APPLICATION_ERROR(-20003, 'Duplicate values found in the database.');

    WHEN OTHERS THEN
      -- Handle any other exceptions that might occur
      -- You can log the error or take other appropriate actions
      -- For example: 
      -- DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
      -- ROLLBACK; -- You might want to rollback the transaction
      RAISE; -- Re-raise the exception for debugging and error propagation
  END UpdateAppointment;
END HMS_Update_Package;



-- Package specification (Header)
CREATE OR REPLACE PACKAGE HMS_Update_Package AS
  -- Procedure for updating data in the Medical Records Table
  PROCEDURE UpdateMedicalRecord(
    p_RecordID MedicalRecords.RecordID%type,
    p_PatientID MedicalRecords.PatientID%type,
    p_DoctorID MedicalRecords.DoctorID%type,
    p_DateOfVisit MedicalRecords.DateOfVisit%type,
    p_Diagnosis MedicalRecords.Diagnosis%type,
    p_Prescription MedicalRecords.Prescription%type,
    p_LabTestResults MedicalRecords.LabTestResults%type,
    p_Notes MedicalRecords.Notes%type
  );
END HMS_Update_Package;

-- Package body
CREATE OR REPLACE PACKAGE BODY HMS_Update_Package AS
  -- Procedure for updating data in the Medical Records Table
  PROCEDURE UpdateMedicalRecord(
    p_RecordID MedicalRecords.RecordID%type,
    p_PatientID MedicalRecords.PatientID%type,
    p_DoctorID MedicalRecords.DoctorID%type,
    p_DateOfVisit MedicalRecords.DateOfVisit%type,
    p_Diagnosis MedicalRecords.Diagnosis%type,
    p_Prescription MedicalRecords.Prescription%type,
    p_LabTestResults MedicalRecords.LabTestResults%type,
    p_Notes MedicalRecords.Notes%type
  ) IS
  BEGIN
    -- Attempt to update the medical record information
    UPDATE MedicalRecords
    SET
      PatientID = p_PatientID,
      DoctorID = p_DoctorID,
      DateOfVisit = p_DateOfVisit,
      Diagnosis = p_Diagnosis,
      Prescription = p_Prescription,
      LabTestResults = p_LabTestResults,
      Notes = p_Notes
    WHERE RecordID = p_RecordID;

    -- Check if any rows were affected by the UPDATE statement
    IF SQL%ROWCOUNT = 0 THEN
      -- Raise a custom exception if no rows were updated
      RAISE_APPLICATION_ERROR(-20001, 'No medical record found with RecordID: ' || p_RecordID);
    ELSE
      -- Commit the transaction if rows were updated
      COMMIT;
    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Handle the specific exception when no data is found
      RAISE_APPLICATION_ERROR(-20002, 'No medical record found with RecordID: ' || p_RecordID);

    WHEN DUP_VAL_ON_INDEX THEN
      -- Handle the case when a unique constraint violation occurs
      RAISE_APPLICATION_ERROR(-20003, 'Duplicate values found in the database.');

    WHEN OTHERS THEN
      -- Handle any other exceptions that might occur
      -- You can log the error or take other appropriate actions
      -- For example: 
      -- DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
      -- ROLLBACK; -- You might want to rollback the transaction
      RAISE; -- Re-raise the exception for debugging and error propagation
  END UpdateMedicalRecord;
END HMS_Update_Package;



-- Package specification (Header)
CREATE OR REPLACE PACKAGE HMS_Update_Package AS
  -- Procedure for updating data in the Prescription Table
  PROCEDURE UpdatePrescription(
    p_PrescriptionID Prescription.PrescriptionID%type,
    p_PatientID Prescription.PatientID%type,
    p_DoctorID Prescription.DoctorID%type,
    p_Day Prescription.Day%type,
    p_MedicationName Prescription.MedicationName%type,
    p_Dosage Prescription.Dosage%type,
    p_Frequency Prescription.Frequency%type,
    p_Duration Prescription.Duration%type
  );
END HMS_Update_Package;

-- Package body
CREATE OR REPLACE PACKAGE BODY HMS_Update_Package AS
  -- Procedure for updating data in the Prescription Table
  PROCEDURE UpdatePrescription(
    p_PrescriptionID Prescription.PrescriptionID%type,
    p_PatientID Prescription.PatientID%type,
    p_DoctorID Prescription.DoctorID%type,
    p_Day Prescription.Day%type,
    p_MedicationName Prescription.MedicationName%type,
    p_Dosage Prescription.Dosage%type,
    p_Frequency Prescription.Frequency%type,
    p_Duration Prescription.Duration%type
  ) IS
  BEGIN
    -- Attempt to update the prescription information
    UPDATE Prescription
    SET
      PatientID = p_PatientID,
      DoctorID = p_DoctorID,
      Day = p_Day,
      MedicationName = p_MedicationName,
      Dosage = p_Dosage,
      Frequency = p_Frequency,
      Duration = p_Duration
    WHERE PrescriptionID = p_PrescriptionID;

    -- Check if any rows were affected by the UPDATE statement
    IF SQL%ROWCOUNT = 0 THEN
      -- Raise a custom exception if no rows were updated
      RAISE_APPLICATION_ERROR(-20001, 'No prescription found with PrescriptionID: ' || p_PrescriptionID);
    ELSE
      -- Commit the transaction if rows were updated
      COMMIT;
    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Handle the specific exception when no data is found
      RAISE_APPLICATION_ERROR(-20002, 'No prescription found with PrescriptionID: ' || p_PrescriptionID);

    WHEN DUP_VAL_ON_INDEX THEN
      -- Handle the case when a unique constraint violation occurs
      RAISE_APPLICATION_ERROR(-20003, 'Duplicate values found in the database.');

    WHEN OTHERS THEN
      -- Handle any other exceptions that might occur
      -- DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
      -- ROLLBACK; -- You might want to rollback the transaction
      RAISE; -- Re-raise the exception for debugging and error propagation
  END UpdatePrescription;
END HMS_Update_Package;




-- Package specification (Header)
CREATE OR REPLACE PACKAGE HMS_Update_Package AS
  -- Procedure for updating data in the DoctorSchedule Table
  PROCEDURE UpdateDoctorSchedule(
    p_ScheduleID DoctorSchedule.ScheduleID%type,
    p_DayOfWeek DoctorSchedule.DayOfWeek%type,
    p_StartTime DoctorSchedule.StartTime%type,
    p_EndTime DoctorSchedule.EndTime%type
  );
END HMS_Update_Package;

-- Package body
CREATE OR REPLACE PACKAGE BODY HMS_Update_Package AS
  -- Procedure for updating data in the DoctorSchedule Table
  PROCEDURE UpdateDoctorSchedule(
    p_ScheduleID DoctorSchedule.ScheduleID%type,
    p_DayOfWeek DoctorSchedule.DayOfWeek%type,
    p_StartTime DoctorSchedule.StartTime%type,
    p_EndTime DoctorSchedule.EndTime%type
  ) IS
  BEGIN
    -- Attempt to update the doctor's schedule information
    UPDATE DoctorSchedule
    SET
      DayOfWeek = p_DayOfWeek,
      StartTime = p_StartTime,
      EndTime = p_EndTime
    WHERE ScheduleID = p_ScheduleID;

    -- Check if any rows were affected by the UPDATE statement
    IF SQL%ROWCOUNT = 0 THEN
      -- Raise a custom exception if no rows were updated
      RAISE_APPLICATION_ERROR(-20001, 'No doctor schedule found with ScheduleID: ' || p_ScheduleID);
    ELSE
      -- Commit the transaction if rows were updated
      COMMIT;
    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Handle the specific exception when no data is found
      RAISE_APPLICATION_ERROR(-20002, 'No doctor schedule found with ScheduleID: ' || p_ScheduleID);

    WHEN DUP_VAL_ON_INDEX THEN
      -- Handle the case when a unique constraint violation occurs
      RAISE_APPLICATION_ERROR(-20003, 'Duplicate values found in the database.');

    WHEN OTHERS THEN
      -- Handle any other exceptions that might occur
      -- You can log the error or take other appropriate actions
      -- For example: 
      -- DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
      -- ROLLBACK; -- You might want to rollback the transaction
      RAISE; -- Re-raise the exception for debugging and error propagation
  END UpdateDoctorSchedule;
END HMS_Update_Package;



-- Package specification (Header)
CREATE OR REPLACE PACKAGE HMS_Update_Package AS
  PROCEDURE UpdateBillingAndPayments(
    p_TransactionID BillingAndPayments.TransactionID%type,
    p_PatientID BillingAndPayments.TransactionID%type,
    p_DoctorID BillingAndPayments.doctorid%type,
    p_Day BillingAndPayments.Day%type,
    p_ServiceOrProcedure BillingAndPayments.ServiceOrProcedure%type,
    p_Amount BillingAndPayments.Amount%type,
    p_PaymentMethod BillingAndPayments.PaymentMethod%type,
    p_PaymentStatus BillingAndPayments.PaymentStatus%type
  );
END HMS_Update_Package;

-- Package body
CREATE OR REPLACE PACKAGE BODY HMS_Update_Package AS
  -- Procedure for updating data in the BillingAndPayments Table
  PROCEDURE UpdateBillingAndPayments(
    p_TransactionID BillingAndPayments.TransactionID%type,
    p_PatientID BillingAndPayments.TransactionID%type,
    p_DoctorID BillingAndPayments.doctorid%type,
    p_Day BillingAndPayments.Day%type,
    p_ServiceOrProcedure BillingAndPayments.ServiceOrProcedure%type,
    p_Amount BillingAndPayments.Amount%type,
    p_PaymentMethod BillingAndPayments.PaymentMethod%type,
    p_PaymentStatus BillingAndPayments.PaymentStatus%type
  ) IS
  BEGIN
    -- Attempt to update the billing and payment information
    UPDATE BillingAndPayments
    SET
      PatientID = p_PatientID,
      DoctorID = p_DoctorID,
      Day = p_Day,
      ServiceOrProcedure = p_ServiceOrProcedure,
      Amount = p_Amount,
      PaymentMethod = p_PaymentMethod,
      PaymentStatus = p_PaymentStatus
    WHERE TransactionID = p_TransactionID;

    -- Check if any rows were affected by the UPDATE statement
    IF SQL%ROWCOUNT = 0 THEN
      -- Raise a custom exception if no rows were updated
      RAISE_APPLICATION_ERROR(-20001, 'No billing and payment record found with TransactionID: ' || p_TransactionID);
    ELSE
      -- Commit the transaction if rows were updated
      COMMIT;
    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Handle the specific exception when no data is found
      RAISE_APPLICATION_ERROR(-20002, 'No billing and payment record found with TransactionID: ' || p_TransactionID);

    WHEN DUP_VAL_ON_INDEX THEN
      -- Handle the case when a unique constraint violation occurs
      RAISE_APPLICATION_ERROR(-20003, 'Duplicate values found in the database.');

    WHEN OTHERS THEN
      -- Handle any other exceptions that might occur
      -- You can log the error or take other appropriate actions
      -- For example: 
      -- DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
      -- ROLLBACK; -- You might want to rollback the transaction
      RAISE; -- Re-raise the exception for debugging and error propagation
  END UpdateBillingAndPayments;
END HMS_Update_Package;

