

CREATE OR REPLACE PACKAGE HMS_UPDATE_Package AS 
  PROCEDURE UpdatePatient(
    p_PatientID  PatientDetails.PatientID%type,
    p_FirstName  PatientDetails.FirstName%type,
    p_LastName  PatientDetails.LastName%type,
    p_Gender  PatientDetails.Gender%type,
    p_DateOfBirth  PatientDetails.DateOfBirth%type,
    p_Phone  PatientDetails.Phone%type,
    p_Email  PatientDetails.Email%type,
    p_Address  PatientDetails.Address%type,
    p_InsuranceInfo  PatientDetails.InsuranceInfo%type,
    p_MedicalHistory  PatientDetails.MedicalHistory%type
  );
END HMS_UPDATE_Package;

CREATE OR REPLACE PACKAGE BODY HMS_UPDATE_Package AS
  PROCEDURE UpdatePatient(
    p_PatientID  PatientDetails.PatientID%type,
    p_FirstName  PatientDetails.FirstName%type,
    p_LastName  PatientDetails.LastName%type,
    p_Gender  PatientDetails.Gender%type,
    p_DateOfBirth  PatientDetails.DateOfBirth%type,
    p_Phone  PatientDetails.Phone%type,
    p_Email  PatientDetails.Email%type,
    p_Address  PatientDetails.Address%type,
    p_InsuranceInfo  PatientDetails.InsuranceInfo%type,
    p_MedicalHistory  PatientDetails.MedicalHistory%type
  ) IS
  BEGIN
    -- Attempt to update the patient information
    UPDATE PatientDetails
    SET FirstName = p_FirstName,
        LastName = p_LastName,
        Gender = p_Gender,
        DateOfBirth = p_DateOfBirth,
        Phone = p_Phone,
        Email = p_Email,
        Address = p_Address,
        InsuranceInfo = p_InsuranceInfo,
        MedicalHistory = p_MedicalHistory
    WHERE PatientID = p_PatientID;

    -- Check if any rows were affected by the UPDATE statement
    IF SQL%ROWCOUNT = 0 THEN
      -- Raise a custom exception if no rows were updated
      RAISE_APPLICATION_ERROR(-20001, 'No patient found with PatientID: ' || p_PatientID);
    ELSE
      -- Commit the transaction if rows were updated
      COMMIT;
    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Handle the specific exception when no data is found
      RAISE_APPLICATION_ERROR(-20002, 'No patient found with PatientID: ' || p_PatientID);

    WHEN DUP_VAL_ON_INDEX THEN
      -- Handle the case when a unique constraint violation occurs
      RAISE_APPLICATION_ERROR(-20003, 'Duplicate values found in the database.');

    WHEN OTHERS THEN
      -- Handle any other exceptions that might occur
      -- You can log the error or take other appropriate actions
      -- For example: 
      -- DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
      -- ROLLBACK; -- You might want to rollback the transaction
      RAISE; -- Re-raise the exception for debugging and error propagation
  END UpdatePatient;
END HMS_UPDATE_Package;




-- Package specification (Header)
CREATE OR REPLACE PACKAGE HMS_Update_Package AS
  PROCEDURE UpdateDoctor(
    p_DoctorID DoctorInformation.DoctorID%type,
    p_FirstName DoctorInformation.FirstName%type,
    p_LastName DoctorInformation.LastName%type,
    p_Specialization DoctorInformation.Specialization%type,
    p_ContactInfo DoctorInformation.ContactInfo%type
  );
END HMS_Update_Package;

-- Package body
CREATE OR REPLACE PACKAGE BODY HMS_Update_Package AS
  -- Procedure for updating data in the Doctor Information Table
  PROCEDURE UpdateDoctor(
    p_DoctorID DoctorInformation.DoctorID%type,
    p_FirstName DoctorInformation.FirstName%type,
    p_LastName DoctorInformation.LastName%type,
    p_Specialization DoctorInformation.Specialization%type,
    p_ContactInfo DoctorInformation.ContactInfo%type
  ) IS
  BEGIN
    -- Attempt to update the doctor information
    UPDATE DoctorInformation
    SET FirstName = p_FirstName,
        LastName = p_LastName,
        Specialization = p_Specialization,
        ContactInfo = p_ContactInfo
    WHERE DoctorID = p_DoctorID;

    -- Check if any rows were affected by the UPDATE statement
    IF SQL%ROWCOUNT = 0 THEN
      -- Raise a custom exception if no rows were updated
      RAISE_APPLICATION_ERROR(-20001, 'No doctor found with DoctorID: ' || p_DoctorID);
    ELSE
      -- Commit the transaction if rows were updated
      COMMIT;
    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Handle the specific exception when no data is found
      RAISE_APPLICATION_ERROR(-20002, 'No doctor found with DoctorID: ' || p_DoctorID);

    WHEN DUP_VAL_ON_INDEX THEN
      -- Handle the case when a unique constraint violation occurs
      RAISE_APPLICATION_ERROR(-20003, 'Duplicate values found in the database.');

    WHEN OTHERS THEN
      -- Handle any other exceptions that might occur
      -- You can log the error or take other appropriate actions
      -- For example: 
      -- DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
      -- ROLLBACK; -- You might want to rollback the transaction
      RAISE; -- Re-raise the exception for debugging and error propagation
  END UpdateDoctor;
END HMS_Update_Package;
